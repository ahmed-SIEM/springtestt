name: CI/CD - Spring Boot

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test-sonar-docker:
    runs-on: self-hosted

    steps:
      # Cloner le repo (code source Spring Boot)
      - name: Checkout Spring Boot repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ajouter Maven au PATH
      - name: Ajouter Maven au PATH
        run: echo "/usr/bin" >> $GITHUB_PATH

      # Installer Java 17
      - name: Installer Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Maven pour accélérer les builds
      - name: Cache Maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Compiler & exécuter tests + générer rapport JaCoCo
      - name: Compiler & Générer JaCoCo
        run: mvn clean verify

      # Analyse SonarQube
      - name: Analyse SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn sonar:sonar \
            -Dsonar.projectKey=ahmed-springtestt \
            -Dsonar.host.url=http://sonarqube.192.168.224.163.nip.io:9000 \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login DockerHub
      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Test Docker info (optionnel)
      - name: Test Docker login
        run: docker info

      # Build & Push image Docker
      - name: Build & Push image Docker
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t ${{ secrets.DOCKER_USERNAME }}/springback:latest \
            -t ${{ secrets.DOCKER_USERNAME }}/springback:${{ github.sha }} \
            --push .

      # Cloner repo K8s manifests
      - name: Checkout k8s-manifests repo
        uses: actions/checkout@v4
        with:
          repository: ahmed-SIEM/K8s-manifests
          path: manifests
          token: ${{ secrets.GH_PAT }}

      # Mettre à jour le tag image dans le manifest Kubernetes
      - name: Update image tag in backend manifest
        run: |
          sed -i "s|image:.*|image: ${{ secrets.DOCKER_USERNAME }}/springback:${{ github.sha }}|" manifests/backend/deployment.yaml
          cd manifests
          git config user.name "ahmed-SIEM"
          git config user.email "ahmedsouid008@gmail.com"
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update backend image to ${{ github.sha }}"
            git push
          fi
